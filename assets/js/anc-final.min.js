/**
 * Created by KOALA on 21/02/2016.
 */
'use strict';

var app = angular.module('AskNCast', ['AskNCast.services', 'ui.router', 'ngMaterial', 'chart.js']);

var dev = true;

app.config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {

    $urlRouterProvider.otherwise('/');

    $stateProvider
        .state('leaderboard', {
            templateUrl: 'views/leaderboard.html'
        })
        .state('question', {
            templateUrl: 'views/question.html'
        });

}]);

app.config(["$mdThemingProvider", function($mdThemingProvider) {
    //$mdThemingProvider.theme('black')
    //    .backgroundPalette('grey', {
    //        'default': '900',
    //    })
    //    .dark();
    //
    //$mdThemingProvider.setDefaultTheme('black');

    $mdThemingProvider.theme('default')
        .primaryPalette('grey', {
            'default': '800',
        })
        .accentPalette('red')
        .dark();
}]);

app.config(["ChartJsProvider", function (ChartJsProvider) {
    // Configure all charts
    ChartJsProvider.setOptions({
        colours: ['#66BB6A', '#EF5350'],
        responsive: true
    });
    // Configure all doughnut charts
    ChartJsProvider.setOptions('Doughnut', {
        animateScale: false
    });
}]);
/**
 * Created by KOALA on 25/02/2016.
 */

function Game (GameManager) {
    this.gameManager_ = GameManager;

    if (dev)
        this.debugUi = new cast.receiver.games.debug.DebugUI(GameManager);
};

Game.prototype.run = function (loadedCallback) {
    this.gameManager_.updateGameplayState(cast.receiver.games.GameplayState.RUNNING, null);
    loadedCallback();
};

Game.prototype.setDebugUi = function (toggle) {
    if (toggle)
        this.debugUi.open();
    else
        this.debugUi.close();
};

Game.prototype.setGameData = function (gameData) {
    this.gameManager_.updateGameData(gameData);
};

Game.prototype.chooseRandomQuestioner = function (gameData, eGamePhase) {
    var randomPlayer = _.shuffle(this.gameManager_.getConnectedPlayers())[0];
    gameData.phase = eGamePhase.CHOOSING;
    gameData.questioner = randomPlayer.playerData.name;
    gameData.questioner_id = randomPlayer.playerId;
    gameData.questioner_avatar = randomPlayer.playerData.avatar;
    gameData.skip_avail = false;
    this.setGameData(gameData);
};

Game.prototype.setQuestion = function (question, gameData, eGamePhase) {
    gameData.phase = eGamePhase.VOTING;
    gameData.question = question;
    gameData.skip_avail = false;
    this.setGameData(gameData);
};

Game.prototype.addVote = function (votes, playerId, vote, prognosis) {
    votes[playerId] = { vote: vote, prognosis: prognosis };
};

Game.prototype.calculateVotes = function (votes, players, gameData, eGamePhase) {
    //votes = {
    //    ":0": { vote: "yes", prognosis: "3" },
    //    ":2": { vote: "no", prognosis: "0" },
    //    ":4": { vote: "yes", prognosis: "3" },
    //    ":6": { vote: "yes", prognosis: "3" },
    //    ":8": { vote: "yes", prognosis: "4" },
    //    ":10": { vote: "yes", prognosis: "4" },
    //};

    //players = [
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:0.png', name: "test1", score: 0, },
    //        playerId: ":0",
    //        playerState: 6,
    //    },
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:2.png', name: "test2", score: 0, },
    //        playerId: ":2",
    //        playerState: 6,
    //    },
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:4.png', name: "test3", score: 0, },
    //        playerId: ":4",
    //        playerState: 6,
    //    },
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:6.png', name: "test4", score: 0, },
    //        playerId: ":6",
    //        playerState: 6,
    //    },
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:8.png', name: "test5", score: 0, },
    //        playerId: ":8",
    //        playerState: 6,
    //    },
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:10.png', name: "test6", score: 0, },
    //        playerId: ":10",
    //        playerState: 6,
    //    },
    //];

    var winnerPts = 2;
    var closerPts = 1;
    var numberOfYes = this.getNumberOfYes(votes);
    var winnersId = this.getWinnersId(votes, numberOfYes);

    //If someone found the right prognosis, he earns 2 points
    if (winnersId.length > 0) {
        angular.forEach(winnersId, function(winnerId) {
            angular.forEach(players, function(player) {
                if (player.playerId == winnerId)
                    player.playerData.score += winnerPts;
            });
        });
    }
    //If no ones found the right prongnosis, the closest earn 1 point
    else {
        var closersId = this.getClosersId(votes, numberOfYes);
        angular.forEach(closersId, function(closerId) {
            angular.forEach(players, function(player) {
                if (player.playerId == closerId)
                    player.playerData.score += closerPts;
            });
        });
    }

    gameData.phase = eGamePhase.CHOOSING;
    gameData.skip_avail = false;
    this.setGameData(gameData);
    return numberOfYes;
};
Game.prototype.getNumberOfYes = function (votes) {
    var yes = 0;

    angular.forEach(votes, function(value, key) {
        if (value.vote == "yes")
            yes++;
    });

    return yes;
};
Game.prototype.getWinnersId = function (votes, numberOfYes) {
    var winnersId = [];

    angular.forEach(votes, function(value, key) {
        if (value.prognosis == numberOfYes)
            winnersId.push(key);
    });

    return winnersId;
};
Game.prototype.getClosersId = function (votes, numberOfYes) {
    var closersId = [];

    var differences = {};
    angular.forEach(votes, function(value, key) {
        differences[key] = Math.abs(numberOfYes - value.prognosis);
    });
    var closer = _.min(differences);
    angular.forEach(differences, function(value, key) {
        if (value == closer)
            closersId.push(key);
    });

    return closersId;
};

Game.prototype.stop = function () {

};

// Copyright 2015 Google Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Loads scripts in order and appends timestamp GET parameter to prevent the
 * browser from caching them. This is only meant for development builds, not
 * production.
 * @param {!Array.<string>} paths The paths to the js files to load.
 */
function loadScriptsNoCache(paths)
{
    if (paths.length == 0)
    {
        return;
    }

    // Load the first path in the array, shift it, and call loadScriptsNoCache
    // again with the shifted path array when the script loads.
    var fileRef = document.createElement('script');
    fileRef.setAttribute('type', 'text/javascript');
    fileRef.setAttribute('src', paths.shift() + '?ts=' + Date.now());
    fileRef.onload = function ()
    {
        loadScriptsNoCache(paths);
    };

    document.getElementsByTagName('head')[0].appendChild(fileRef);
}

loadScriptsNoCache([
    // Make sure cast receiver SDK is loaded before games receiver SDK.
    'https:///www.gstatic.com/cast/sdk/libs/receiver/2.0.0/cast_receiver.js',
    'https://www.gstatic.com/cast/sdk/libs/games/1.0.0/cast_games_receiver.js',
]);

/**
 * Created by KOALA on 21/02/2016.
 */
'use strict';

app.controller('leaderboardController', ["$scope", "cast", function ($scope, cast) {

    $scope.labels = ["Yes", "No"];
    $scope.datas = [];
    $scope.datasQuestions = [];

    var feedDatas = function () {
        angular.forEach($scope.lastQuestions, function(value, key) {
            $scope.datas.push([value.yes, value.no]);
            $scope.datasQuestions.push(value.question);
        });
    };

    feedDatas();
}]);
/**
 * Created by KOALA on 21/02/2016.
 */
'use strict';

app.controller('mainController', ["$scope", "$log", "$window", "$timeout", "$state", "cast", function ($scope, $log, $window, $timeout, $state, cast) {

    $scope.window = $window;
    $scope.connected = 0;
    $scope.sessionCount = 0;

    var avatarUrlBase = 'https://api.adorable.io/avatars/50/';

    var idlePromise;

    $scope.players = [];
    //$scope.players = [
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:0.png', name: "test1", score: 0, },
    //        playerId: ":0",
    //        playerState: 6,
    //    },
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:2.png', name: "test2", score: 0, },
    //        playerId: ":2",
    //        playerState: 6,
    //    },
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:4.png', name: "test3", score: 0, },
    //        playerId: ":4",
    //        playerState: 6,
    //    },
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:6.png', name: "test4", score: 0, },
    //        playerId: ":6",
    //        playerState: 6,
    //    },
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:8.png', name: "test5", score: 0, },
    //        playerId: ":8",
    //        playerState: 6,
    //    },
    //    {
    //        playerData: { avatar: 'https://api.adorable.io/avatars/50/:10.png', name: "test6", score: 0, },
    //        playerId: ":10",
    //        playerState: 6,
    //    },
    //];

    var eGameMessageType = {
        DEBUG_UI: 'debugUI',
        QUESTION: 'question',
        VOTE: 'vote',
        SKIP: 'skip',
    };

    var eGamePhase = {
        CHOOSING: 'choosing',
        VOTING: 'voting',
    };
    $scope.gameData = {
        phase: eGamePhase.CHOOSING,
        question: '',
        questioner: '',
        questioner_id: '',
        questioner_avatar: '',
        skip_avail: false,
    };
    //$scope.gameData = {
    //    phase: eGamePhase.VOTING,
    //    question: 'Tu suces pour un Mars ?',
    //    questioner: 'test1',
    //    questioner_id: ':0',
    //    questioner_avatar: avatarUrlBase+":0.png",
    //    skip_avail: false,
    //};

    $scope.votes = {};
    //$scope.votes = {
    //    ":0": { vote: "yes", prognosis: "3" },
    //    ":2": { vote: "no", prognosis: "0" },
    //    ":4": { vote: "yes", prognosis: "3" },
    //    ":6": { vote: "yes", prognosis: "3" },
    //    ":8": { vote: "yes", prognosis: "4" },
    //    ":10": { vote: "yes", prognosis: "4" },
    //};

    $scope.lastQuestions = [];
    //$scope.lastQuestions = [
    //    {question: "question1?", yes: 2, no: 1},
    //    {question: "question2?", yes: 1, no: 2},
    //    {question: "question3?", yes: 1, no: 1},
    //];

    var idleTimeout = function () {
        if ($scope.connected == 0) {
            cast.finish();
        }
    };

    var calculateVotes = function (votes) {
        if (!_.isEmpty(votes) && _.size(votes) == _.size(cast.game.gameManager_.getPlayersInState($window.cast.receiver.games.PlayerState.PLAYING))) {
            var numberOfYes = cast.game.calculateVotes(votes, $scope.players, $scope.gameData, eGamePhase);
            var numberOfNo = _.size(cast.game.gameManager_.getPlayersInState($window.cast.receiver.games.PlayerState.PLAYING)) - numberOfYes;
            $scope.lastQuestions.push({question: $scope.gameData.question, yes: numberOfYes, no: numberOfNo});
            cast.game.chooseRandomQuestioner($scope.gameData, eGamePhase);
            $scope.votes = {};
        }
    };

    $scope.$on(cast.SENDER_CONNECTED, function (ev, castEvent) {
        $log.info('Sender connected: ' + JSON.stringify(castEvent));
        if (idlePromise) {
            $scope.idle = false;
            $timeout.cancel(idlePromise);
            idlePromise = null;
        }
        $scope.connected++;
        $scope.sessionCount++;
    });
    $scope.$on(cast.SENDER_DISCONNECTED, function (ev, castEvent) {
        $scope.connected--;
        if ($scope.connected == 0) {
            if ($scope.getSessionCount() <= 0) {
                cast.finish();
            } else {
                $scope.idle = true;
                if (idlePromise) {
                    $timeout.cancel(idlePromise);
                }
                idlePromise = $timeout(idleTimeout, 10000);
            }
        }
    });

    $scope.getSessionCount = function () {
        return $scope.sessionCount;
    };

    $scope.$on(cast.PLAYER_AVAILABLE, function (ev, castEvent) {
        if (dev)
            $log.debug(castEvent);
        $scope.players = $scope.players.filter(function(e){return e.playerId !== castEvent.playerInfo.playerId});
        $scope.players.push(castEvent.playerInfo);
        cast.game.gameManager_.updatePlayerData(castEvent.playerInfo.playerId, {name: castEvent.requestExtraMessageData.name, score: 0, avatar: avatarUrlBase+castEvent.playerInfo.playerId+'.png'});
        if ($scope.gameData.phase == eGamePhase.CHOOSING && cast.game.gameManager_.getConnectedPlayers().length == 1) {
            cast.game.chooseRandomQuestioner($scope.gameData, eGamePhase);
        }
    });

    $scope.$on(cast.PLAYER_QUIT, function (ev, castEvent) {
        if (dev)
            $log.debug(castEvent);
        if ($scope.gameData.phase == eGamePhase.VOTING) {
            calculateVotes($scope.votes);
        }
    });

    $scope.$on(cast.PLAYER_DROPPED, function (ev, castEvent) {
        if (dev)
            $log.debug(castEvent);
        if ($scope.gameData.phase == eGamePhase.VOTING) {
            calculateVotes($scope.votes);
        }
    });

    $scope.$on(cast.GAME_MESSAGE_RECEIVED, function (ev, castEvent) {
        if (dev)
            $log.debug(castEvent);
        switch (castEvent.requestExtraMessageData.type) {
            case eGameMessageType.DEBUG_UI:
                if (dev)
                    cast.game.setDebugUi(castEvent.requestExtraMessageData.toggle);
                break;
            case eGameMessageType.QUESTION:
                if ($scope.gameData.phase == eGamePhase.CHOOSING && $scope.gameData.questioner_id == castEvent.playerInfo.playerId)
                    cast.game.setQuestion(castEvent.requestExtraMessageData.question, $scope.gameData, eGamePhase);
                break;
            case eGameMessageType.VOTE:
                if ($scope.gameData.phase == eGamePhase.VOTING) {
                    cast.game.addVote($scope.votes, castEvent.playerInfo.playerId, castEvent.requestExtraMessageData.vote, castEvent.requestExtraMessageData.prognosis);
                }
                break;
            case eGameMessageType.SKIP:
                if ($scope.gameData.skip_avail) {

                }
                break;
            default:
                break;
        }
    });

    $scope.$watch("gameData.phase", function (newValue, oldValue) {
        switch (newValue) {
            case null:
                break;
            case eGamePhase.CHOOSING:
                $state.go('leaderboard');
                break;
            case eGamePhase.VOTING:
                $state.go('question');
                break;
            default:
                break;
        }
    });

    $scope.$watchCollection("votes", function (newValue, oldValue) {
        if ($scope.gameData.phase == eGamePhase.VOTING)
            calculateVotes(newValue);
    });

}]);
/**
 * Created by KOALA on 26/02/2016.
 */
'use strict';

app.controller('questionController', ["$scope", "$window", "cast", function ($scope, $window, cast) {


}]);
/**
 * Created by KOALA on 25/02/2016.
 */
'use strict';

angular.module('AskNCast.services', []).service('cast',["$window", "$rootScope", "$q", function Cast($window, $rootScope, $q) {

    this.game = null;
    this.appName = 'AskNCast';
    var service = this;
    var castReceiverManager;

    this.SENDER_CONNECTED = "sender-connected";
    this.SENDER_DISCONNECTED = "sender-disconnected";
    this.PLAYER_AVAILABLE = "player-available";
    this.PLAYER_QUIT = "player-quit";
    this.PLAYER_DROPPED = "player-dropped";
    this.GAME_MESSAGE_RECEIVED = "game-message-received";

    var initializeCast = function () {
        castReceiverManager = $window.cast.receiver.CastReceiverManager.getInstance();
        var appConfig = new $window.cast.receiver.CastReceiverManager.Config();

        appConfig.statusText = service.appName + ' ready.';
        // In production, use the default maxInactivity instead of using this.
        appConfig.maxInactivity = 6000; // 100 minutes for testing only.

        // Create the game before starting castReceiverManager to make sure any extra
        // cast namespaces can be set up.
        /** @suppress {missingRequire} */
        var gameConfig = new $window.cast.receiver.games.GameManagerConfig();
        gameConfig.applicationName = service.appName;
        // Allow more than the default number of players for this debugger receiver.
        gameConfig.maxPlayers = 10;
        /** @suppress {missingRequire} */
        var gameManager = new $window.cast.receiver.games.GameManager(gameConfig);
        /** @suppress {missingRequire} */
        service.game = new Game(gameManager);

        // Note that we will not automatically tear down the debugger if there are no
        // senders to make it easy for playing with the receiver using devtools.
        var startGame = function() {
            service.game.run(function() {
                console.log(gameConfig.applicationName + ' running.');
                gameManager.updateGameStatusText(gameConfig.applicationName + ' running.');
            });
        };

        castReceiverManager.onSenderConnected = function (event) {
            $rootScope.$apply(function () {
                $rootScope.$broadcast(service.SENDER_CONNECTED, event);
            });
        };
        castReceiverManager.onSenderDisconnected = function (event) {
            $rootScope.$apply(function () {
                $rootScope.$broadcast(service.SENDER_DISCONNECTED, event);
            });
        };

        gameManager.addEventListener(cast.receiver.games.EventType.PLAYER_AVAILABLE,
            function(event) {
                //console.log('Player ' + event.playerInfo.playerId + ' is available');
                $rootScope.$apply(function () {
                    $rootScope.$broadcast(service.PLAYER_AVAILABLE, event);
                });
            });

        gameManager.addEventListener(cast.receiver.games.EventType.PLAYER_QUIT,
            function(event) {
                $rootScope.$apply(function () {
                    $rootScope.$broadcast(service.PLAYER_QUIT, event);
                });
            });

        gameManager.addEventListener(cast.receiver.games.EventType.PLAYER_DROPPED,
            function(event) {
                $rootScope.$apply(function () {
                    $rootScope.$broadcast(service.PLAYER_DROPPED, event);
                });
            });

        gameManager.addEventListener(cast.receiver.games.EventType.GAME_MESSAGE_RECEIVED,
            function(event) {
                //console.log(event);
                $rootScope.$apply(function () {
                    $rootScope.$broadcast(service.GAME_MESSAGE_RECEIVED, event);
                });
            });

        castReceiverManager.onReady = function(event) {
            startGame();
        };
        castReceiverManager.start(appConfig);

    };

    this.boot = function () {
        if (document.readyState === 'complete') {
            initializeCast();
        } else {
            $window.onload = initializeCast;
        }
    };

    this.finish = function () {
        castReceiverManager.stop();
    };
}]).
run(["cast", function (cast) {
    cast.boot();
}]);